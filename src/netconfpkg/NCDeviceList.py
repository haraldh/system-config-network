## Copyright (C) 2001, 2002 Red Hat, Inc.
## Copyright (C) 2001, 2002 Than Ngo <than@redhat.com>
## Copyright (C) 2001, 2002 Harald Hoyer <harald@redhat.com>
## Copyright (C) 2001, 2002 Philipp Knirsch <pknirsch@redhat.com>

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

import os
import os.path

from NC_functions import *
#from netconfpkg.NCDevice import Device
from netconfpkg import DeviceList_base
from netconfpkg import ipcalc
from netconfpkg.NCDeviceFactory import getDeviceFactory
from rhpl import ConfPAP
from rhpl import ConfSMB
from rhpl import Conf
import UserList

if not "/usr/lib/rhs/python" in sys.path:
    sys.path.append("/usr/lib/rhs/python")

class ConfDevices(UserList.UserList):
    def __init__(self):
        UserList.UserList.__init__(self)

        #for confdir in [ SYSCONFDEVICEDIR, OLDSYSCONFDEVICEDIR ]:
        confdir = SYSCONFDEVICEDIR    
        try:
            dir = os.listdir(confdir)
        except OSError, msg:
            pass
        else:
            for entry in dir:
                if (len(entry) > 6) and \
                   entry[:6] == 'ifcfg-' and \
                   os.path.isfile(confdir + entry) and \
                   (confdir + entry)[-1] != "~" and \
                   os.access(confdir + entry, os.R_OK):
                    self.append(entry[6:])
        return

class DeviceList(DeviceList_base):
    def __init__(self, list = None, parent = None):
        DeviceList_base.__init__(self, list, parent)        

    def load(self):
        df = getDeviceFactory()
        devices = ConfDevices()
        msg = ""
        for dev in devices:
            i = self.addDevice()
            self.data[i].load(dev)            
            devclass = df.getDeviceClass(self.data[i].Type)
            if devclass:
                newdev = devclass()
                newdev.load(dev)
                self.data[i] = newdev
            else:
                raise "NO DEVICE CLASS FOUND FOR %s" % dev
                
        self.commit(changed=false)
        
    def test(self):
        pass

    def __repr__(self):
        return repr(self.__dict__)
    
    def save(self):
        self.commit(changed=false)

        nwconf = Conf.ConfShellVar('/etc/sysconfig/network')
        if len(self) > 0:
            nwconf["NETWORKING"] = "yes"
        nwconf.write()

        #
        # clear all Dialer sections in wvdial.conf
        # before the new Dialer sections written
        #
        wvdialconf = ConfSMB.ConfSMB(filename = '/etc/wvdial.conf')
        for wvdialkey in wvdialconf.vars.keys():
            if wvdialkey[:6] == 'Dialer': del wvdialconf[wvdialkey]
        wvdialconf.write()
            
        #
        # Clear all pap and chap-secrets generated by netconf
        #
        papconf = getPAPConf()
        chapconf = getCHAPConf()
        for key in papconf.keys():
            del papconf[key]
        for key in chapconf.keys():
            del chapconf[key]

        #
        # traverse all devices in the list
        #
        for dev in self:                        
            #
            # really save the device
            #
            #if dev.changed:
            dev.save()

            #
            # write the pap and chap-secrets, if any
            #
            if dev.Dialup and dev.Dialup.Login:
                papconf[dev.Dialup.Login] = str(dev.Dialup.Password)
                chapconf[dev.Dialup.Login] = str(dev.Dialup.Password)


        papconf.write()
        chapconf.write()

        #
        # Remove old config files
        #
        try:
            dir = os.listdir(SYSCONFDEVICEDIR)
        except OSError, msg:
            raise IOError, 'Cannot save in ' \
                  + SYSCONFDEVICEDIR + ': ' + str(msg)
        for entry in dir:
            if (len(entry) <= 6) or \
               entry[:6] != 'ifcfg-' or \
               (not os.path.isfile(SYSCONFDEVICEDIR + entry)):
                continue
            
            devid = entry[6:]
                
            found = false
            for dev in self:
                if dev.DeviceId == devid:
                    break
            else:
                unlink(SYSCONFDEVICEDIR + entry)
                unlink(OLDSYSCONFDEVICEDIR+'/ifcfg-'+devid)

        self.commit()

DVList = None

def getDeviceList():
    global DVList
    if DVList == None:
        DVList = DeviceList()
        DVList.load()
        #print "DVList.load()"
    #print repr(DVList)
    return DVList
                
if __name__ == '__main__':
    dl = DeviceList()
    dl.load()
    for dev in dl:
        if dev.Type == "Ethernet":
            continue
            print "ID: " + str(dev.DeviceId)
            print "Name: " + str(dev.Name)
            print "Device: " + str(dev.Device)
            print "Alias: " + str(dev.Alias)
            print "Type: " + str(dev.Type)
            print "OnBoot: " + str(dev.OnBoot)
            print "AllowUser: " + str(dev.AllowUser)
            print "BootProto: " + str(dev.BootProto)
            print "IP: " + str(dev.IP)
            print "Netmask: " + str(dev.Netmask)
            print "Gateway: " + str(dev.Netmask)
            print "Hostname: " + str(dev.Hostname)
            print "Domain: " + str(dev.Domain)
            print "AutoDNS: " + str(dev.AutoDNS)
        elif dev.Type == "Modem" or dev.Type == "ISDN":
            print "Device: ", str(dev.Device)
            print "Provider Name: " + str(dev.Dialup.ProviderName)
            print "Login: " + str(dev.Dialup.Login)
            print "Password: " + str(dev.Dialup.Password)
            print "Authentication: " + str(dev.Dialup.Authentication)
            print "MSN: " + str(dev.Dialup.MSN)
            print "Prefix: " + str(dev.Dialup.Prefix)
            print "Areacode: " + str(dev.Dialup.Areacode)
            print "Regioncode: " + str(dev.Dialup.Regioncode)
            print "PhoneNumber: " + str(dev.Dialup.PhoneNumber)
            print "LocalIP: " + str(dev.Dialup.LocalIP)
            print "RemoteIP: " + str(dev.Dialup.RemoteIP)
            print "PrimaryDNS: " + str(dev.Dialup.PrimaryDNS)
            print "SecondaryDNS: " + str(dev.Dialup.SecondaryDNS)
            print "Persist: " + str(dev.Dialup.Persist)
            print "DefRoute: " + str(dev.Dialup.DefRoute)
            print "ChargeHup: " + str(dev.Dialup.ChargeHup)
            print "ChargeInt: " + str(dev.Dialup.ChargeInt)
            print "Ihup: " + str(dev.Dialup.Ihup)
            print "DialMax: " + str(dev.Dialup.DialMax)
            print "Layer2: " + str(dev.Dialup.Layer2)
            print "PPP Options: " , dev.Dialup.PPPOptions
            if dev.Dialup.DialinServer:
                print "DialinServer: yes"
            else:
                print "DialinServer: no"
            if dev.Dialup.ChannelBundling:
                print "ChannelBundling: yes"
            else:
                print "ChannelBundling: no"
            print "EncapMode: " + str(dev.Dialup.EncapMode)
            print "HangupTimeout: " + str(dev.Dialup.HangupTimeout)
            print "DialMode: " + str(dev.Dialup.DialMode)
            print "SlaveDevice: " + str(dev.Dialup.SlaveDevice)
            if dev.Dialup.Secure:
                print "Secure: yes"
            else:
                print "Secure: no"
            print "InitStrings: ", dev.Dialup.InitStrings
            print "Callback:", dev.Dialup.Callback
            #if dev.Dialup.Callback == None:
            print "  Number:",  dev.Dialup.Callback.Number
            print "  Delay:", dev.Dialup.Callback.Hup
            if dev.Dialup.Callback.CBCP:
                print "  CBCP: yes"
            else:
                print "  CBCP: no"
            
            print "Compression:"
            if dev.Dialup.Compression:
                if dev.Dialup.Compression.VJTcpIp:
                    print "  VJTcpIp: yes"
                else:
                    print "  VJTcpIp: no"
                if dev.Dialup.Compression.VJID:
                    print "  VJID: yes"
                else:
                    print "  VJID: no"
                if dev.Dialup.Compression.AdressControl:
                    print "  AdressControl: yes"
                else:
                    print "  AdressControl: no"
                if dev.Dialup.Compression.ProtoField:
                    print "  ProtoField: yes"
                else:
                    print "  ProtoField: no"
                if dev.Dialup.Compression.BSD:
                    print "  BSD: yes"
                else:
                    print "  BSD: no"
                if dev.Dialup.Compression.CCP:
                    print "  CCP: yes"
                else:
                    print "  CCP: no"
                                        
            
        print "---------------------------------------"
    #dl.save()
