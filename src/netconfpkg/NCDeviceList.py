## Copyright (C) 2001 Red Hat, Inc.
## Copyright (C) 2001 Than Ngo <than@redhat.com>
## Copyright (C) 2001 Harald Hoyer <harald@redhat.com>
## Copyright (C) 2001 Philipp Knirsch <pknirsch@redhat.com>

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

import os
import os.path

from NC_functions import *
from DeviceList import *
import ConfPAP

if not "/usr/lib/rhs/python" in sys.path:
    sys.path.append("/usr/lib/rhs/python")

import Conf

class ConfDevices(UserList.UserList):
    def __init__(self):
        UserList.UserList.__init__(self)

        #for confdir in [ SYSCONFDEVICEDIR, OLDSYSCONFDEVICEDIR ]:
        confdir = SYSCONFDEVICEDIR    
        try:
            dir = os.listdir(confdir)
        except OSError, msg:
            pass
        else:
            for entry in dir:
                if (len(entry) > 6) and \
                   entry[:6] == 'ifcfg-' and \
                   os.path.isfile(confdir + entry):
                    self.append(entry[6:])
        return

class DeviceList(DeviceList_base):
    def __init__(self, list = None, parent = None):
        DeviceList_base.__init__(self, list, parent)        

    def load(self):
        devices = ConfDevices()
        for dev in devices:
            i = self.addDevice()
            self.data[i].load(dev)
        self.commit()

    def save(self):
        try:
            dir = os.listdir(SYSCONFDEVICEDIR)
        except OSError, msg:
            raise IOError, 'Cannot save in ' \
                  + SYSCONFDEVICEDIR + ': ' + str(msg)

        try: 
            for entry in dir:
                if (len(entry) <= 6) or \
                   entry[:6] != 'ifcfg-' or \
                   (not os.path.isfile(SYSCONFDEVICEDIR + entry)):
                    #print "skipping " + entry
                    continue
                
                devid = entry[6:]

                try:
                    found = false
                    #print "searching for " + devid
                    for dev in self:
                        if dev.DeviceId == devid:
                            found = true
                            break
                    if not found:
                        os.unlink(SYSCONFDEVICEDIR + entry)
                except OSError, msg:
                    raise IOError, 'Error removing old device. ' + str(msg)
        finally:
            pppnum = 0
            ipppnum = 0
            isdnnum = 0
            fp = os.open('/etc/sysconfig/static-routes', os.O_WRONLY| os.O_CREAT, 0600)

            #
            # Clear all pap and chap-secrets generated by netconf
            #
            papconf = ConfPAP.ConfPAP("/etc/ppp/pap-secrets")
            chapconf = ConfPAP.ConfPAP("/etc/ppp/chap-secrets")
            for key in papconf.keys():
                del papconf[key]
            for key in chapconf.keys():
                del chapconf[key]

            
            for dev in self:
                if dev.Type == "Modem" or dev.Type == 'xDSL':
                    dev.Device = "ppp"+str(pppnum)
                    pppnum = pppnum + 1
                if dev.Type == "ISDN":
                    if dev.Dialup.EncapMode == 'syncppp':
                        dev.Device = "ippp"+str(ipppnum)
                        if dev.Dialup.ChannelBundling == true:
                            ipppnum = ipppnum + 1
                            dev.Dialup.SlaveDevice = "ippp"+str(ipppnum)
                        ipppnum = ipppnum + 1
                    else:
                        dev.Device = "isdn"+str(isdnnum)
                        isdnnum = isdnnum + 1
                        
                #
                # Now write the pap and chap-secrets
                #
                if dev.Dialup and dev.Dialup.Login:
                    papconf[dev.Dialup.Login] = [str(dev.Device), str(dev.Dialup.Password)]
                    chapconf[dev.Dialup.Login] = [str(dev.Device), str(dev.Dialup.Password)]

                dev.save()
                    
                if fp and dev.StaticRoutes and len(dev.StaticRoutes) > 0:
                    for route in dev.StaticRoutes:
                        os.write(fp, dev.Device+" net "+route.Address+" netmask "+route.Netmask+" gw "+route.Gateway+"\n")
                        
            if fp:
               os.close(fp)

            papconf.write()
            chapconf.write()

        self.commit()

DVList = None

def getDeviceList():
    global DVList
    if DVList == None:
        DVList = DeviceList()
        DVList.load()
    return DVList

                
if __name__ == '__main__':
    dl = DeviceList()
    dl.load()
    for dev in dl:
        if dev.Type == "Ethernet":
            continue
            print "ID: " + str(dev.DeviceId)
            print "Name: " + str(dev.Name)
            print "Device: " + str(dev.Device)
            print "Alias: " + str(dev.Alias)
            print "Type: " + str(dev.Type)
            print "OnBoot: " + str(dev.OnBoot)
            print "AllowUser: " + str(dev.AllowUser)
            print "BootProto: " + str(dev.BootProto)
            print "IP: " + str(dev.IP)
            print "Netmask: " + str(dev.Netmask)
            print "Gateway: " + str(dev.Netmask)
            print "Hostname: " + str(dev.Hostname)
            print "Domain: " + str(dev.Domain)
            print "AutoDNS: " + str(dev.AutoDNS)
        elif dev.Type == "Modem" or dev.Type == "ISDN":
            print "Device: ", str(dev.Device)
            print "Provider Name: " + str(dev.Dialup.ProviderName)
            print "Login: " + str(dev.Dialup.Login)
            print "Password: " + str(dev.Dialup.Password)
            print "Authentication: " + str(dev.Dialup.Authentication)
            print "MSN: " + str(dev.Dialup.MSN)
            print "Prefix: " + str(dev.Dialup.Prefix)
            print "Areacode: " + str(dev.Dialup.Areacode)
            print "Regioncode: " + str(dev.Dialup.Regioncode)
            print "PhoneNumber: " + str(dev.Dialup.PhoneNumber)
            print "LocalIP: " + str(dev.Dialup.LocalIP)
            print "RemoteIP: " + str(dev.Dialup.RemoteIP)
            print "PrimaryDNS: " + str(dev.Dialup.PrimaryDNS)
            print "SecondaryDNS: " + str(dev.Dialup.SecondaryDNS)
            print "Persist: " + str(dev.Dialup.Persist)
            print "DefRoute: " + str(dev.Dialup.DefRoute)
            print "ChargeHup: " + str(dev.Dialup.ChargeHup)
            print "ChargeInt: " + str(dev.Dialup.ChargeInt)
            print "Ihup: " + str(dev.Dialup.Ihup)
            print "DialMax: " + str(dev.Dialup.DialMax)
            print "Layer2: " + str(dev.Dialup.Layer2)
            print "PPP Options: " , dev.Dialup.PPPOptions
            if dev.Dialup.DialinServer:
                print "DialinServer: yes"
            else:
                print "DialinServer: no"
            if dev.Dialup.ChannelBundling:
                print "ChannelBundling: yes"
            else:
                print "ChannelBundling: no"
            print "EncapMode: " + str(dev.Dialup.EncapMode)
            print "HangupTimeout: " + str(dev.Dialup.HangupTimeout)
            print "DialMode: " + str(dev.Dialup.DialMode)
            print "SlaveDevice: " + str(dev.Dialup.SlaveDevice)
            if dev.Dialup.Secure:
                print "Secure: yes"
            else:
                print "Secure: no"
            print "InitStrings: ", dev.Dialup.InitStrings
            print "Callback:", dev.Dialup.Callback
            #if dev.Dialup.Callback == None:
            print "  Number:",  dev.Dialup.Callback.Number
            print "  Delay:", dev.Dialup.Callback.Hup
            if dev.Dialup.Callback.CBCP:
                print "  CBCP: yes"
            else:
                print "  CBCP: no"
            
            print "Compression:"
            if dev.Dialup.Compression:
                if dev.Dialup.Compression.VJTcpIp:
                    print "  VJTcpIp: yes"
                else:
                    print "  VJTcpIp: no"
                if dev.Dialup.Compression.VJID:
                    print "  VJID: yes"
                else:
                    print "  VJID: no"
                if dev.Dialup.Compression.AdressControl:
                    print "  AdressControl: yes"
                else:
                    print "  AdressControl: no"
                if dev.Dialup.Compression.ProtoField:
                    print "  ProtoField: yes"
                else:
                    print "  ProtoField: no"
                if dev.Dialup.Compression.BSD:
                    print "  BSD: yes"
                else:
                    print "  BSD: no"
                if dev.Dialup.Compression.CCP:
                    print "  CCP: yes"
                else:
                    print "  CCP: no"
                                        
            
        print "---------------------------------------"
    #dl.save()
